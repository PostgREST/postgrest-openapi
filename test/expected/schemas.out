-- Tables
-- detects tables as objects
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'type');
 jsonb_pretty 
--------------
 "object"
(1 row)

-- detects columns with enum types as an enum property
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'properties'->'size');
        jsonb_pretty        
----------------------------
 {                         +
     "enum": [             +
         "XS",             +
         "S",              +
         "M",              +
         "L",              +
         "XL"              +
     ],                    +
     "type": "string",     +
     "format": "types.size"+
 }
(1 row)

-- references a composite type column from a table to a component definition
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'properties'->'attr');
                    jsonb_pretty                    
----------------------------------------------------
 {                                                 +
     "$ref": "#/components/schemas/types.attribute"+
 }
(1 row)

-- identifies the required columns
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'required');
   jsonb_pretty    
-------------------
 [                +
     "id",        +
     "code",      +
     "name",      +
     "description"+
 ]
(1 row)

-- detects comments done on a table and shows it as description
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'description');
                              jsonb_pretty                               
-------------------------------------------------------------------------
 "Products summary\n\nProducts description\nthat spans\nmultiple lines."
(1 row)

-- detects comments done on a table column and shows it as description
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'products'->'properties'->'id'->'description');
       jsonb_pretty        
---------------------------
 "identifier of a product"
(1 row)

-- maps sql types to OpenAPI types correctly
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'openapi_types');
                 jsonb_pretty                  
-----------------------------------------------
 {                                            +
     "type": "object",                        +
     "properties": {                          +
         "a_json": {                          +
             "type": "object",                +
             "format": "json"                 +
         },                                   +
         "a_real": {                          +
             "type": "number",                +
             "format": "real"                 +
         },                                   +
         "a_text": {                          +
             "type": "string",                +
             "format": "text"                 +
         },                                   +
         "a_jsonb": {                         +
             "type": "object",                +
             "format": "jsonb"                +
         },                                   +
         "a_bigint": {                        +
             "type": "integer",               +
             "format": "bigint"               +
         },                                   +
         "a_boolean": {                       +
             "type": "boolean",               +
             "format": "boolean"              +
         },                                   +
         "a_int_arr": {                       +
             "type": "array",                 +
             "items": {                       +
                 "type": "integer",           +
                 "format": "integer"          +
             },                               +
             "format": "integer[]"            +
         },                                   +
         "a_integer": {                       +
             "type": "integer",               +
             "format": "integer"              +
         },                                   +
         "a_numeric": {                       +
             "type": "number",                +
             "format": "numeric"              +
         },                                   +
         "a_bool_arr": {                      +
             "type": "array",                 +
             "items": {                       +
                 "type": "boolean",           +
                 "format": "boolean"          +
             },                               +
             "format": "boolean[]"            +
         },                                   +
         "a_char_arr": {                      +
             "type": "array",                 +
             "items": {                       +
                 "type": "string",            +
                 "format": "character"        +
             },                               +
             "format": "character[]"          +
         },                                   +
         "a_json_arr": {                      +
             "type": "array",                 +
             "items": {                       +
                 "type": "object",            +
                 "format": "json"             +
             },                               +
             "format": "json[]"               +
         },                                   +
         "a_smallint": {                      +
             "type": "integer",               +
             "format": "smallint"             +
         },                                   +
         "a_text_arr": {                      +
             "type": "array",                 +
             "items": {                       +
                 "type": "string",            +
                 "format": "text"             +
             },                               +
             "format": "text[]"               +
         },                                   +
         "a_character": {                     +
             "type": "string",                +
             "format": "character",           +
             "maxLength": 1                   +
         },                                   +
         "a_jsonb_arr": {                     +
             "type": "array",                 +
             "items": {                       +
                 "type": "object",            +
                 "format": "jsonb"            +
             },                               +
             "format": "jsonb[]"              +
         },                                   +
         "a_bigint_arr": {                    +
             "type": "array",                 +
             "items": {                       +
                 "type": "integer",           +
                 "format": "bigint"           +
             },                               +
             "format": "bigint[]"             +
         },                                   +
         "a_numeric_arr": {                   +
             "type": "array",                 +
             "items": {                       +
                 "type": "number",            +
                 "format": "numeric"          +
             },                               +
             "format": "numeric[]"            +
         },                                   +
         "a_varchar_arr": {                   +
             "type": "array",                 +
             "items": {                       +
                 "type": "string",            +
                 "format": "character varying"+
             },                               +
             "format": "character varying[]"  +
         },                                   +
         "a_double_precision": {              +
             "type": "number",                +
             "format": "double precision"     +
         },                                   +
         "a_character_varying": {             +
             "type": "string",                +
             "format": "character varying"    +
         }                                    +
     }                                        +
 }
(1 row)

-- does not show tables outside the exposed schema
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'secret_table');
 jsonb_pretty 
--------------
 
(1 row)

-- detects composite types as objects
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute'->'type');
 jsonb_pretty 
--------------
 "object"
(1 row)

-- references a composite type column from another composite type to a component definition
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute'->'properties'->'dim');
                    jsonb_pretty                    
----------------------------------------------------
 {                                                 +
     "$ref": "#/components/schemas/types.dimension"+
 }
(1 row)

-- detects a composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.dimension');
          jsonb_pretty           
---------------------------------
 {                              +
     "type": "object",          +
     "properties": {            +
         "hei": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "len": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "wid": {               +
             "type": "number",  +
             "format": "numeric"+
         }                      +
     }                          +
 }
(1 row)

-- detects an array composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.color');
            jsonb_pretty            
------------------------------------
 {                                 +
     "type": "object",             +
     "properties": {               +
         "def": {                  +
             "type": "string",     +
             "format": "text"      +
         },                        +
         "hex": {                  +
             "type": "string",     +
             "format": "character",+
             "maxLength": 6        +
         }                         +
     }                             +
 }
(1 row)

-- does not show a composite type that is not used by an exposed table
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.hiddentype');
 jsonb_pretty 
--------------
 
(1 row)

-- detects comments done on a composite type and shows it as description
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute'->'description');
                               jsonb_pretty                                
---------------------------------------------------------------------------
 "Attribute summary\n\nAttribute description\nthat spans\nmultiple lines."
(1 row)

-- detects comments done on a composite type column and shows it as description
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute'->'properties'->'other'->'description');
              jsonb_pretty               
-----------------------------------------
 "other information about the attribute"
(1 row)

-- references a composite type column from an array composite type inside the items property
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute'->'properties'->'colors'->'items');
                  jsonb_pretty                  
------------------------------------------------
 {                                             +
     "$ref": "#/components/schemas/types.color"+
 }
(1 row)

-- Functions
-- Composite types inside arguments
-- detects composite types as objects
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_arg'->'type');
 jsonb_pretty 
--------------
 "object"
(1 row)

-- references a composite type column from another composite type to a component definition
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_arg'->'properties'->'dim');
                      jsonb_pretty                      
--------------------------------------------------------
 {                                                     +
     "$ref": "#/components/schemas/types.dimension_arg"+
 }
(1 row)

-- detects a composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.dimension_arg');
          jsonb_pretty           
---------------------------------
 {                              +
     "type": "object",          +
     "properties": {            +
         "hei": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "len": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "wid": {               +
             "type": "number",  +
             "format": "numeric"+
         }                      +
     }                          +
 }
(1 row)

-- detects an array composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.color_arg');
            jsonb_pretty            
------------------------------------
 {                                 +
     "type": "object",             +
     "properties": {               +
         "def": {                  +
             "type": "string",     +
             "format": "text"      +
         },                        +
         "hex": {                  +
             "type": "string",     +
             "format": "character",+
             "maxLength": 6        +
         }                         +
     }                             +
 }
(1 row)

-- references a composite type column from an array composite type inside the items property
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_arg'->'properties'->'colors'->'items');
                    jsonb_pretty                    
----------------------------------------------------
 {                                                 +
     "$ref": "#/components/schemas/types.color_arg"+
 }
(1 row)

-- Composite types inside returning values
-- detects composite types as objects
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_ret'->'type');
 jsonb_pretty 
--------------
 "object"
(1 row)

-- references a composite type column from another composite type to a component definition
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_ret'->'properties'->'dim');
                      jsonb_pretty                      
--------------------------------------------------------
 {                                                     +
     "$ref": "#/components/schemas/types.dimension_ret"+
 }
(1 row)

-- detects a composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.dimension_ret');
          jsonb_pretty           
---------------------------------
 {                              +
     "type": "object",          +
     "properties": {            +
         "hei": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "len": {               +
             "type": "number",  +
             "format": "numeric"+
         },                     +
         "wid": {               +
             "type": "number",  +
             "format": "numeric"+
         }                      +
     }                          +
 }
(1 row)

-- detects an array composite type inside another composite type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.color_ret');
            jsonb_pretty            
------------------------------------
 {                                 +
     "type": "object",             +
     "properties": {               +
         "def": {                  +
             "type": "string",     +
             "format": "text"      +
         },                        +
         "hex": {                  +
             "type": "string",     +
             "format": "character",+
             "maxLength": 6        +
         }                         +
     }                             +
 }
(1 row)

-- references a composite type column from an array composite type inside the items property
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'types.attribute_ret'->'properties'->'colors'->'items');
                    jsonb_pretty                    
----------------------------------------------------
 {                                                 +
     "$ref": "#/components/schemas/types.color_ret"+
 }
(1 row)

-- Non-composite return values
-- detects a function that returns a simple type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_simple_type');
     jsonb_pretty      
-----------------------
 {                    +
     "type": "string",+
     "format": "text" +
 }
(1 row)

-- detects a function that returns a simple array type
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_simple_type_arr');
       jsonb_pretty        
---------------------------
 {                        +
     "type": "array",     +
     "items": {           +
         "type": "string",+
         "format": "text" +
     },                   +
     "format": "text[]"   +
 }
(1 row)

-- detects a function that returns table
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_table');
                          jsonb_pretty                          
----------------------------------------------------------------
 {                                                             +
     "type": "object",                                         +
     "properties": {                                           +
         "num": {                                              +
             "type": "integer",                                +
             "format": "integer"                               +
         },                                                    +
         "val": {                                              +
             "type": "string",                                 +
             "format": "text"                                  +
         },                                                    +
         "comp": {                                             +
             "$ref": "#/components/schemas/types.dimension_ref"+
         }                                                     +
     }                                                         +
 }
(1 row)

-- detects a function that returns table with array columns
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_table_arr');
                            jsonb_pretty                            
--------------------------------------------------------------------
 {                                                                 +
     "type": "object",                                             +
     "properties": {                                               +
         "num": {                                                  +
             "type": "array",                                      +
             "items": {                                            +
                 "type": "integer",                                +
                 "format": "integer"                               +
             },                                                    +
             "format": "integer[]"                                 +
         },                                                        +
         "val": {                                                  +
             "type": "array",                                      +
             "items": {                                            +
                 "type": "string",                                 +
                 "format": "text"                                  +
             },                                                    +
             "format": "text[]"                                    +
         },                                                        +
         "comp": {                                                 +
             "type": "array",                                      +
             "items": {                                            +
                 "$ref": "#/components/schemas/types.dimension_ref"+
             },                                                    +
             "format": "types.dimension_ref[]"                     +
         }                                                         +
     }                                                             +
 }
(1 row)

-- detects a function that returns a record with inout arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_inout');
                        jsonb_pretty                        
------------------------------------------------------------
 {                                                         +
     "type": "object",                                     +
     "properties": {                                       +
         "y": {                                            +
             "type": "string",                             +
             "format": "text"                              +
         },                                                +
         "z": {                                            +
             "$ref": "#/components/schemas/types.color_ref"+
         }                                                 +
     }                                                     +
 }
(1 row)

-- detects a function that returns a record with inout array arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_inout_arr');
                          jsonb_pretty                          
----------------------------------------------------------------
 {                                                             +
     "type": "object",                                         +
     "properties": {                                           +
         "y": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "type": "string",                             +
                 "format": "text"                              +
             },                                                +
             "format": "text[]"                                +
         },                                                    +
         "z": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "$ref": "#/components/schemas/types.color_ref"+
             },                                                +
             "format": "types.color_ref[]"                     +
         }                                                     +
     }                                                         +
 }
(1 row)

-- detects a function that returns a record with out arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_out');
                        jsonb_pretty                        
------------------------------------------------------------
 {                                                         +
     "type": "object",                                     +
     "properties": {                                       +
         "a": {                                            +
             "type": "string",                             +
             "format": "text"                              +
         },                                                +
         "b": {                                            +
             "$ref": "#/components/schemas/types.color_ref"+
         }                                                 +
     }                                                     +
 }
(1 row)

-- detects a function that returns a record with out array arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_out_arr');
                          jsonb_pretty                          
----------------------------------------------------------------
 {                                                             +
     "type": "object",                                         +
     "properties": {                                           +
         "a": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "type": "string",                             +
                 "format": "text"                              +
             },                                                +
             "format": "text[]"                                +
         },                                                    +
         "b": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "$ref": "#/components/schemas/types.color_ref"+
             },                                                +
             "format": "types.color_ref[]"                     +
         }                                                     +
     }                                                         +
 }
(1 row)

-- detects a function that returns a record with inout and out arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_inout_out');
                        jsonb_pretty                        
------------------------------------------------------------
 {                                                         +
     "type": "object",                                     +
     "properties": {                                       +
         "y": {                                            +
             "type": "string",                             +
             "format": "text"                              +
         },                                                +
         "z": {                                            +
             "$ref": "#/components/schemas/types.color_ref"+
         }                                                 +
     }                                                     +
 }
(1 row)

-- detects a function that returns a record with inout and out array arguments
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_inout_out_arr');
                          jsonb_pretty                          
----------------------------------------------------------------
 {                                                             +
     "type": "object",                                         +
     "properties": {                                           +
         "y": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "type": "string",                             +
                 "format": "text"                              +
             },                                                +
             "format": "text[]"                                +
         },                                                    +
         "z": {                                                +
             "type": "array",                                  +
             "items": {                                        +
                 "$ref": "#/components/schemas/types.color_ref"+
             },                                                +
             "format": "types.color_ref[]"                     +
         }                                                     +
     }                                                         +
 }
(1 row)

-- detects a function that returns an unknown record as a free-form object
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.returns_unknown_record');
      jsonb_pretty      
------------------------
 {                     +
     "type": "object", +
     "format": "record"+
 }
(1 row)

-- detects a function with a single unnamed json parameter
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_json_param');
     jsonb_pretty      
-----------------------
 {                    +
     "type": "object",+
     "format": "json" +
 }
(1 row)

-- detects a function with a single unnamed jsonb parameter
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_jsonb_param');
     jsonb_pretty      
-----------------------
 {                    +
     "type": "object",+
     "format": "jsonb"+
 }
(1 row)

-- detects a function with a single unnamed text parameter
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_text_param');
     jsonb_pretty      
-----------------------
 {                    +
     "type": "string",+
     "format": "text" +
 }
(1 row)

-- detects a function with a single unnamed xml parameter
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_xml_param');
     jsonb_pretty      
-----------------------
 {                    +
     "type": "string",+
     "format": "xml"  +
 }
(1 row)

-- ignores a function with a single unnamed unrecognized parameter
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_unrecognized_param');
 jsonb_pretty 
--------------
 
(1 row)

-- ignores a function with unnamed parameters
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_unrecognized_param');
 jsonb_pretty 
--------------
 
(1 row)

-- ignores a function with named and unnamed parameters
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.single_unnamed_unrecognized_param');
 jsonb_pretty 
--------------
 
(1 row)

-- ignores a function outside of the exposed schemas
select jsonb_pretty(postgrest_openapi_spec('{test}')->'components'->'schemas'->'rpc.private.secret_function');
 jsonb_pretty 
--------------
 
(1 row)

-- Common
-- defines all the available prefer headers
select key, jsonb_pretty(value)
from jsonb_each(postgrest_openapi_spec('{test}')->'components'->'schemas')
where key like 'header.prefer%';
           key            |                               jsonb_pretty                               
--------------------------+--------------------------------------------------------------------------
 header.preferTx          | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "tx": {                                                         +
                          |             "enum": [                                                   +
                          |                 "commit",                                               +
                          |                 "rollback"                                              +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "description": "Specify how to end a transaction"           +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferCount       | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "count": {                                                      +
                          |             "enum": [                                                   +
                          |                 "exact",                                                +
                          |                 "planned",                                              +
                          |                 "estimated"                                             +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "description": "Get the total size of the table"            +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferParams      | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "params": {                                                     +
                          |             "enum": [                                                   +
                          |                 "single-object"                                         +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "deprecated": true,                                         +
                          |             "description": "Send JSON as a single parameter"            +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferReturn      | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "return": {                                                     +
                          |             "enum": [                                                   +
                          |                 "minimal",                                              +
                          |                 "headers-only",                                         +
                          |                 "representation"                                        +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "default": "minimal",                                       +
                          |             "description": "Return information of the affected resource"+
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferMissing     | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "missing": {                                                    +
                          |             "enum": [                                                   +
                          |                 "default",                                              +
                          |                 "null"                                                  +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "default": "null",                                          +
                          |             "description": "Handle null values in bulk inserts"         +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferHandling    | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "handling": {                                                   +
                          |             "enum": [                                                   +
                          |                 "strict",                                               +
                          |                 "lenient"                                               +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "default": "lenient",                                       +
                          |             "description": "How to handle invalid preferences"          +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferTimezone    | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "timezone": {                                                   +
                          |             "type": "string",                                           +
                          |             "description": "Specify the time zone"                      +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferResolution  | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "resolution": {                                                 +
                          |             "enum": [                                                   +
                          |                 "merge-duplicates",                                     +
                          |                 "ignore-duplicates"                                     +
                          |             ],                                                          +
                          |             "type": "string",                                           +
                          |             "description": "Handle duplicates in an upsert"             +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
 header.preferMaxAffected | {                                                                       +
                          |     "type": "object",                                                   +
                          |     "properties": {                                                     +
                          |         "max-affected": {                                               +
                          |             "type": "integer",                                          +
                          |             "description": "Specify the amount of resources affected"   +
                          |         }                                                               +
                          |     }                                                                   +
                          | }
(9 rows)

